

What happens when you initialize a repository? Why do you need to do it?

In git a Repository is initialized by running the following command in the directory to be the Repository:

$git init

It will initialize and create all the necessary artificats for git, so that you can start creating commits and add files to the version control


-----------------------------------

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an interim stage where files can me added to build a logical unit of work before committing the changes to the repository as a commit.


----------

How can you use the staging area to make sure you have one commit per logical change?


You can add all the changes the conform to a logical change into the staging area, then compare it with the latest commit, and commit only meaninful changes from the working directory to the staging area, and then do the commit.

-------

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When you want to have separete versions of the application, where each version may contain different features. An specific branch can be used to add all the specific functionality for a version  of the application, while there is another version of the application going on in a different branch, and finally you can have a master branch where you can fix common isssue that are present in all branches, so that later there can be merge to fix the issues in all branches.


--------

Now that you’ve had some experience creating branches and drawing diagrams of your history, go add the following question and your thoughts on it to your reflections file:

How do the diagrams help you visualize the branch structure?


The diagramas help you to easly visualize the hierarchy and flow of all the commits that conform a branch and how different branches can be related, in the sense that to know from which commit exactly did the new branch was created from. It also helps visualizing the deattached commits to build new branches without previously impacting any other branch while working on the changes and doing new commits.

-----------

Reflect: Merging Two Branches

Now that you’ve learned how to use Git to merge branches together, go add the following question and your thoughts on it to your reflections file: 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A new branch, that will combine the commits from the two branches sorted by timestamp. The branch that was merged into the master branch can be deleted. The merge will create a new commit that will become the new tip of the branch that will point to each ot the merged branches.
The merge is done by comparing 3 commits, the 2 branches to merged and the commit from which both branch are diverged.

-----------------

Reflect: Automatic vs. Manual Merging

Now that you’ve learned when Git will not be able to automatically merge branches, and what happens when it can’t, go add the following question and your thoughts on it to your reflections file:

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic merging is good for all the common scenario where there is no conflict, as when there is a comflict between versions is better to know about it so that a person can resolve manually a conflict which could avoid any bug introduced by an incorrect auto merge, this will keep the code healthly even though it will require a considerable amount of effor to resolve manually the merges.





